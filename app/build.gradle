apply plugin: 'com.android.application'
//apply plugin: 'dagger.hilt.android.plugin'

android {
    compileSdkVersion 30
    defaultConfig {
        applicationId "netdesigntool.com.eunions"
        minSdkVersion 19
        targetSdkVersion 30
        versionCode 4
        versionName '1.2'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

        resConfigs "en", "ru"
    }


    signingConfigs {
        release
    }


    buildTypes {
        release {
            minifyEnabled true
            debuggable false
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.release
        }

        debug {
            def suffix
            //useProguard false
            if ("Linux" == System.getProperty("os.name")){
                suffix= ".linux.debug"
            }else {
                suffix= ".debug"
            }
            applicationIdSuffix suffix

            println("added sufix: "+ suffix)
        }

        buildFeatures {
            viewBinding true
        }

    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
    }

    lintOptions {
       // checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

//Prevent Error: DuplicatePlatformClasses
configurations {
    all {
        exclude module: 'httpclient'
    }

    /*all {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }*/

    /*all {
        resolutionStrategy {
            force 'org.hamcrest:hamcrest:2.1'
        }
    }*/
}


allprojects {
    afterEvaluate { project ->
        def propsFile = rootProject.file('keystore_add.properties')
        def configName = 'release'


        if (android.signingConfigs.hasProperty(configName)) {
            println "Need Key info"

            if (propsFile.exists()) {
                def props = new Properties()
                props.load(new FileInputStream(propsFile))
                android.signingConfigs[configName].storeFile = rootProject.file(props['storeFile'])
                android.signingConfigs[configName].storePassword = props['storePassword']
                android.signingConfigs[configName].keyAlias = props['keyAlias']
                android.signingConfigs[configName].keyPassword = props['keyPassword']
                println "Key info was read."
            } else {
                println "Key info cannot be read."
                if (!propsFile.exists()) {
                    println "File cannot be find:  " + propsFile.absolutePath
                }
            }
        }
    }
}

dependencies {

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.3.0-beta01'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0-beta01'
    //
    implementation "androidx.recyclerview:recyclerview:1.1.0"
    implementation 'com.google.android.material:material:1.3.0'
    //
    def lifeCycleVer = '2.3.0'
    implementation "androidx.lifecycle:lifecycle-viewmodel:${lifeCycleVer}"
    implementation "androidx.lifecycle:lifecycle-common-java8:${lifeCycleVer}"

    implementation 'com.google.android:flexbox:1.1.0'

    //Test
    testImplementation 'junit:junit:4.13.2'
    //testImplementation 'androidx.test:core:1.3.0'
    testImplementation 'org.mockito:mockito-core:2.27.0'
    //
    // AndroidTest
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    //androidTestImplementation 'org.hamcrest:hamcrest:2.1'
    //androidTestImplementation 'org.awaitility:awaitility:4.0.3'

    //

    // wiki data
    def wiki = 'org.wikidata.wdtk'
    def wikiVer = '0.11.1'
    implementation "${wiki}:wdtk-wikibaseapi:${wikiVer}"
    implementation "${wiki}:wdtk-datamodel:${wikiVer}"
    implementation 'org.slf4j:slf4j-log4j12:1.8.0-beta4'

    // Retrofit
    def retrofitVer = '2.5.0'
    implementation "com.squareup.retrofit2:retrofit:${retrofitVer}"
    //implementation "com.squareup.retrofit2:converter-gson:${retrofitVer}"
    implementation "com.squareup.retrofit2:converter-moshi:${retrofitVer}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${retrofitVer}"
    implementation 'com.squareup.okhttp3:logging-interceptor:3.14.1'

    // RxJava
    implementation 'io.reactivex.rxjava2:rxjava:2.2.8'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

    // AboutActivity
    implementation 'com.github.biagiopietro:AboutActivity:1.4'

    // *** Hilt ***
    /*def hilt_ver = '2.33-beta'
    implementation "com.google.dagger:hilt-android:${hilt_ver}"
    annotationProcessor "com.google.dagger:hilt-compiler:${hilt_ver}"

    // For instrumentation tests
    androidTestImplementation  "com.google.dagger:hilt-android-testing:${hilt_ver}"
    androidTestAnnotationProcessor "com.google.dagger:hilt-compiler:${hilt_ver}"

    // For local unit tests
    testImplementation "com.google.dagger:hilt-android-testing:${hilt_ver}"
    testAnnotationProcessor "com.google.dagger:hilt-compiler:${hilt_ver}"*/

}
